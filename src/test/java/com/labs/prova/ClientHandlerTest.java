/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.labs.prova;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;

import org.junit.jupiter.api.Test;

class ClientHandlerTest {
    
    @Test 
    void read_client_commands_mib() throws IOException {
        BufferedReader in = mock(BufferedReader.class);
        when(in.readLine()).thenReturn("3:mib",".");
        PrintWriter out = new PrintWriter(System.out);
        Socket clientSocket = mock(Socket.class);
        when(clientSocket.getOutputStream()).thenReturn(System.out);
        ClientHandler clientHandler = new ClientHandler();
        clientHandler.out = out;
        assertEquals("Disconnected from the server!",clientHandler.readClientCommands(in));
    }
    
    @Test 
    void read_client_commands_without_divisor() throws IOException {
        BufferedReader in = mock(BufferedReader.class);
        when(in.readLine()).thenReturn("3 mib",".");
        PrintWriter out = new PrintWriter(System.out);
        Socket clientSocket = mock(Socket.class);
        when(clientSocket.getOutputStream()).thenReturn(System.out);
        ClientHandler clientHandler = new ClientHandler();
        clientHandler.out = out;
        assertEquals("Disconnected from the server!",clientHandler.readClientCommands(in));
    }
    
    @Test 
    void read_client_commands_null_line() throws IOException {
        BufferedReader in = mock(BufferedReader.class);
        when(in.readLine()).thenReturn(null);
        PrintWriter out = new PrintWriter(System.out);
        Socket clientSocket = mock(Socket.class);
        when(clientSocket.getOutputStream()).thenReturn(System.out);
        ClientHandler clientHandler = new ClientHandler();
        clientHandler.out = out;
        assertEquals("",clientHandler.readClientCommands(in));
    }
    
    @Test 
    void read_client_commands_empty_line() throws IOException {
        BufferedReader in = mock(BufferedReader.class);
        when(in.readLine()).thenReturn("",".");
        PrintWriter out = new PrintWriter(System.out);
        Socket clientSocket = mock(Socket.class);
        when(clientSocket.getOutputStream()).thenReturn(System.out);
        ClientHandler clientHandler = new ClientHandler();
        clientHandler.out = out;
        assertEquals("Disconnected from the server!",clientHandler.readClientCommands(in));
    }
}
